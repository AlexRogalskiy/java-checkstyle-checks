<?xml version="1.0"?>

<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
	<!-- Source files should end with new line -->
	<module name="NewlineAtEndOfFile">
		<property name="severity" value="warning" />
	</module>

	<!-- Tab character not allowed in source files -->
	<module name="FileTabCharacter">
		<property name="fileExtensions" value="java,xml" />
	</module>

	<!-- All Java files must contain header -->
	<module name="ru.snake.tools.checkstyle.checks.MultiPatternHeaderCheck">
		<property name="headerFile" value="${config_loc}/mit_license.header" />
	</module>

	<module name="TreeWalker">
		<property name="fileExtensions" value="java" />

		<!-- All block operators must contain braces around code blocks -->
		<module name="NeedBraces" />
		<module name="AvoidNestedBlocks" />

		<!-- Angle braces in generic must not have whitespace between types -->
		<module name="GenericWhitespace" />

		<!-- Magic numbers must be named constants -->
		<module name="MagicNumber" />

		<!-- Avoid wild-card imports in java code -->
		<module name="AvoidStarImport" />

		<!-- Avoid static imports except for JUnit and Mockito libraries -->
		<module name="AvoidStaticImport">
			<property name="excludes" value="org.junit.*,org.hamcrest.*,org.mockito.*" />
		</module>

		<!-- Operators, commas and type casts must have white spate after then -->
		<module name="WhitespaceAfter" />

		<!-- Long complex expressions must be move to variable -->
		<module name="BooleanExpressionComplexity">
			<property name="tokens" value="BXOR,LAND,LOR" />
		</module>

		<module name="MethodParamPad" />
		<module name="AtclauseOrder" />

		<!-- Create private constructor for utility classes -->
		<module name="HideUtilityClassConstructor" />

		<!-- All public classes must be documented -->
		<module name="JavadocType" />

		<!-- All public and protected methods must be documented -->
		<module name="JavadocMethod">
			<property name="allowedAnnotations"
				value="Override, BeforeAll, BeforeEach, Test, AfterEach, AfterAll" />
			<property name="scope" value="protected" />
		</module>

		<!-- If package and private methods can be documented, but javadoc must be valid -->
		<module name="JavadocMethod">
			<property name="scope" value="private" />
			<property name="allowMissingJavadoc" value="true" />
		</module>

		<!-- Empty code blocks must be commented why it's empty -->
		<module name="EmptyBlock">
			<property name="option" value="text" />
		</module>

		<!-- White space characters must not follow after a left parenthesis and before a right parenthesis -->
		<module name="ParenPad" />

		<!-- Long expression must be wrapped to keep operator on new line -->
		<module name="OperatorWrapCheck" />

		<!-- Package name must starts with com.harman.acme -->
		<module name="PackageName">
			<property name="format" value="com\.harman\.acme(\.[a-z][a-z0-9]+)*$" />
		</module>

		<!-- White space at end of line should be avoided -->
		<module name="Regexp">
			<property name="severity" value="warning" />
			<property name="format" value="[ \t]+$" />
			<property name="illegalPattern" value="true" />
			<property name="message" value="Trailing whitespace" />
		</module>

		<!-- Left curly brace must be on new line -->
		<module name="LeftCurly">
			<property name="option" value="nl" />
			<property name="tokens"
				value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF, OBJBLOCK, STATIC_INIT" />
		</module>

		<!-- Left curly brace must in the same line for lambdas -->
		<module name="LeftCurly">
			<property name="option" value="eol" />
			<property name="tokens" value="LAMBDA" />
		</module>

		<!-- Right curly brace must be alone in line -->
		<module name="RightCurly">
			<property name="option" value="alone" />
		</module>

		<!-- Empty line must separate different declarations from each other -->
		<module name="EmptyLineSeparator">
			<property name="allowMultipleEmptyLines" value="false" />
			<property name="allowMultipleEmptyLinesInsideClassMembers" value="false" />
			<property name="tokens"
				value="IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
		</module>

		<!-- Maximal line length is 120 characters -->
		<module name="LineLength">
			<property name="max" value="120" />
		</module>

		<!-- Package name does not contain unsupported by Windows directory -->
		<module name="ru.snake.tools.checkstyle.checks.WindowsSafePackageNameCheck" />

		<!-- Empty lines between curly brace and following code block or previous code block -->
		<module name="ru.snake.tools.checkstyle.checks.EmptySpaceBetweenBlocksCheck">
			<property name="numLines" value="0" />
		</module>
	</module>
</module>
